import { HttpClient } from '../common/HttpClient';
import { ExportFileTypeValue, GCActivityId, GarminDomain, IActivity, ICountActivities, IGarminTokens, IOauth1Token, IOauth2Token, ISocialProfile, IUserSettings, UploadFileTypeTypeValue } from './types';
export type EventCallback<T> = (data: T) => void;
export interface GCCredentials {
    username: string;
    password: string;
}
export interface Listeners {
    [event: string]: EventCallback<any>[];
}
export declare enum Event {
    sessionChange = "sessionChange"
}
export interface Session {
}
export default class GarminConnect {
    client: HttpClient;
    private _userHash;
    private credentials;
    private listeners;
    private url;
    constructor(credentials?: GCCredentials | undefined, domain?: GarminDomain);
    login(username?: string, password?: string): Promise<GarminConnect>;
    exportTokenToFile(dirPath: string): void;
    loadTokenByFile(dirPath: string): void;
    exportToken(): IGarminTokens;
    loadToken(oauth1: IOauth1Token, oauth2: IOauth2Token): void;
    getUserSettings(): Promise<IUserSettings>;
    getUserProfile(): Promise<ISocialProfile>;
    getActivities(start: number, limit: number): Promise<IActivity[]>;
    getActivity(activity: {
        activityId: GCActivityId;
    }): Promise<IActivity>;
    countActivities(): Promise<ICountActivities>;
    downloadOriginalActivityData(activity: {
        activityId: GCActivityId;
    }, dir: string, type?: ExportFileTypeValue): Promise<void>;
    uploadActivity(file: string, format?: UploadFileTypeTypeValue): Promise<unknown>;
    deleteActivity(activity: {
        activityId: GCActivityId;
    }): Promise<void>;
}
